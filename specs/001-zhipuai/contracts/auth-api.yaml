openapi: 3.0.3
info:
  title: 新闻管理系统 - 认证授权 API
  version: 1.0.0
  description: 用户认证、授权和会话管理相关API
servers:
  - url: http://localhost:8080/api
    description: 本地开发环境
  - url: https://api.news.example.com/api
    description: 生产环境

tags:
  - name: Auth
    description: 认证相关接口

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: 管理员登录
      description: 验证用户名和密码，返回JWT Token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: 登录尝试次数过多
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: 登出
      description: 注销当前用户会话（可选实现Token黑名单）
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Auth
      summary: 获取当前用户信息
      description: 根据Token返回当前登录用户的详细信息
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 成功返回用户信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: 未授权或Token过期
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: 刷新Token
      description: 使用旧Token获取新的Token（可选功能）
      operationId: refreshToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Token无效或已过期
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 4
          maxLength: 50
          example: admin
        password:
          type: string
          minLength: 8
          maxLength: 50
          format: password
          example: admin123

    LoginResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: 登录成功
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT Token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            tokenType:
              type: string
              example: Bearer
            expiresIn:
              type: integer
              description: Token过期时间（秒）
              example: 1800
            user:
              $ref: '#/components/schemas/UserInfo'

    RefreshTokenResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Token刷新成功
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            tokenType:
              type: string
              example: Bearer
            expiresIn:
              type: integer
              example: 1800

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: admin
        role:
          type: string
          enum: [ADMIN, USER]
          example: ADMIN
        email:
          type: string
          format: email
          example: admin@example.com
        avatarUrl:
          type: string
          format: uri
          example: https://example.com/avatar.jpg
        createdAt:
          type: string
          format: date-time
          example: 2025-01-01T10:00:00Z
        lastLoginAt:
          type: string
          format: date-time
          example: 2025-10-10T09:30:00Z

    SuccessResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: 操作成功
        data:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: 用户名或密码错误
        error:
          type: string
          example: UNAUTHORIZED
        timestamp:
          type: string
          format: date-time
          example: 2025-10-10T10:00:00Z

